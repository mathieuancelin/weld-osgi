<chapter>
    <title id="osgicdipresentation">Organization of CDI-OSGi</title>
    <section>
        <title>Bundles and interactions</title>
        <para>CDI-OSGi is composed of five bundles: <itemizedlist>
                <listitem>
                    <para>The extension API that describes all the new features provided by CDI-OSGi
                        in the OSGi environment.</para>
                </listitem>
                <listitem>
                    <para>The integration API that allows CDI compliant container to be used with
                        CDI-OSGi.</para>
                </listitem>
                <listitem>
                    <para>The CDI API that describes all the regular CDI features provided by
                        CDI-OSGi to bean bundles.</para>
                </listitem>
                <listitem>
                    <para>The extension bundle that provides CDI-OSGi features for bean bundles by
                        managing them,</para>
                </listitem>
                <listitem>
                    <para>An integration bundle that provides CDI features usable by the extension
                        bundle through an OSGi service.</para>
                </listitem>
            </itemizedlist></para>
        <para>Note that as CDI-OSGi runs in an OSGi environment it is implicit that there is an OSGi
            core bundle too. This one provide OSGi features for all other bundles, including
            CDI-OSGi managed bundles. But it is not an actual part of CDI-OSGi.</para>
        <figure>
            <title>The five bundles of CDI-OSGi</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/CDI-OSGibundlesorganization.png" align="center"
                        format="PNG" depth="800"/>
                </imageobject>
                <caption>This figure shows the five bundles of CDI-OSGi and the links between
                    them.</caption>
            </mediaobject>
        </figure>
        <para>These bundles could regroup in three part (as shown in the figure above):<itemizedlist>
                <listitem>
                    <para>CDI-OSGi extension: The blue part represents the CDI OSGi extension. It is
                        composed of one API bundle and its implementation (the extension bundle). It
                        is the core of CDI-OSGi that manages all bean bundles. All interactions with
                        client bundles go through the CDI-OSGi extension part.</para>
                </listitem>
                <listitem>
                    <para>CDI-OSGi integration: The yellow part represents the CDI OSGi integration.
                        It is composed of one API bundle and its implementation. It is how CDI
                        features are provided to CDI-OSGi. The integration bundle is the
                        implementation of these requirements using a vendor specific CDI
                        implementation (such as Weld).Weld-OSGi is one of the possible extension
                        bundle. So the extension bundle is commutable to support various CDI
                        implementation.</para>
                </listitem>
                <listitem>
                    <para>Mandatory API bundle: The fifth bundle is the mandatory API bundle (as CDI
                        API). It exposes regular features for all client bundles and exempts the
                        user to load these API by himself. It is third-party API provided for
                        convenience to the user.</para>
                </listitem>
            </itemizedlist></para>
    </section>
    <section>
        <title>Descriptions</title>
        <section>
            <title>Extension API</title>
            <para>The extension API defines all the features provided to OSGi environment using CDI
                specification. It exposes all the new utilities and defines the comportment of the
                extension bundle.</para>
            <para>It exposes all the interfaces, events and annotations usable by a developers in
                order to develop its client bean bundles. It defines the programming model of
                CDI-OSGi client bundle. Mostly it is about publishing and consuming injectable
                services in a CDI way.</para>
            <para>It also describes the object the extension bundle needs to orchestrate bean
                bundles.</para>
            <para>So this is where to search for new usages of OSGi.</para>
        </section>
        <section>
            <title>Integration API</title>
            <para>The integration API defines how a CDI container, such as Weld, should bootstrap
                with the CDI OSGi extension. So any CDI environment implementation could use the CDI
                OSGi extension transparently. The CDI compliant container may be provided using an
                implementation bundle.</para>
            <para>This aims at providing the minimum integration in order to start a CDI compliant
                container with every managed bean bundle. Then the extension bundle can get a CDI
                container to provide to every one of its manages bean bundle.</para>
            <para>Moreover the integration API allows to mix CDI compliant container in the same
                application by providing an embedded mode. In this mode a bean bundle is decoupled
                from the extension bundle and is managed on its own. Thus various implementations of
                CDI container can be used or the behavior of a particular bean bundle can be
                particularized.</para>
            <para>All this bootstrapping mechanism works using the service layer of OSGi. A CDI
                compliant implementation bundle may provide a service that allows the extension
                bundle to obtain a new container for every bean bundle.</para>
            <para>So this is where to search to make CDI-OSGi use a specific CDI compliant
                container.</para>
        </section>
        <section>
            <title>CDI API</title>
            <para>The CDI API is described by the CDI specifications. It is provided with CDI-OSGi
                and defines all the CDI features usable in bean bundles.</para>
            <para>This API will not be describe furthermore as it would be redundant with CDI
                specifications.</para>
        </section>
        <section>
            <title>Extension bundle: the puppet master</title>
            <para>The extension bundle is the orchestrator of CDI-OSGi. It may be use by any
                application that requires CDI-OSGi. It may be just started at the beginning of a
                CDI-OSGi application. It requests the extension API bundle as a dependency.</para>
            <para>The extension bundle is the heart of CDI-OSGi application. Once it is started,
                provided that it finds a started integration bundle, it manages all the bean
                bundles. It is in charge of service automatic publishing, service injections, CDI
                event notifications and bundle communications.</para>
            <para>It runs in background, it just need to be started with the OSGi environment, then
                everything is transparent to the user. Client bean bundles do not have to do
                anything in order to use CDI-OSGi functionality.</para>
            <para>In order to perform injections the extension bundle search for a CDI compliant
                container service provider once it is started. Thus it can only work coupled with a
                bundle providing such a service: an implementation bundle.</para>
            <para>The extension bundle provides an extension to OSGi as an extender pattern. The
                extension bundle, the extender, tracks for bean bundles, the extensions, to be
                started. Then CDI utilities are enabled for these bean bundles over OSGi
                environment.</para>
            <para>The extension bundle works that
                way:<programlisting>BEGIN
    start
    WHILE ! implementation_bundle.isStarted
        wait
    END_WHILE
    obtain_container_factory
    FOR bean_bundle : started_bundles
        manage_bean_bundle
        provide_container
    END_FOR
    WHILE implementation_bundle.isStarted
        wait_event
        OnBeanBundleStart
            manage_bean_bundle
            provide_container
        OnBeanBundleStop
            unmanage_bean_bundle
    END_WHILE
    stop
    FOR bean_bundle : namaged_bundles
        unmanage_bean_bundle
        stop_bean_bundle
    END_FOR
END</programlisting></para>
            <para>So this is where the magic happens and where OSGi applications become much more
                simple.</para>
        </section>
        <section>
            <title>Integration bundle: choose a CDI compliant container</title>
            <para>The integration bundle is responsible for providing CDI compliant containers to
                the extension bundle. It may be started with the extension bundle and publish a CDI
                container factory service. It request the integration API bundle as a
                dependency.</para>
            <para>It is an implementation of the integration API but it can use any CDI
                implementation in order to fulfill it. So this bundle might not be unique but exist
                for each vendor specific CDI implementation (such as Weld).</para>
            <para>A integration bundle may work that way:</para>
            <programlisting>BEGIN
    start
    register_container_factory_service
    WHILE true
        wait
        OnContainerRequest
            provide_container
    END_WHILE
    unregister_container_factory_service
END</programlisting>
        </section>
    </section>
    <section>
        <title>CDI-OSGi features</title>
        <para>As an extension to OSGi, CDI-OSGi provides several features : <itemizedlist>
                <listitem>
                    <para>Complete integration with OSGi world by the use of extender pattern and
                        extension bundle. Thus complete compatibility with already existing
                        tools.</para>
                </listitem>
                <listitem>
                    <para>Non intruding, configurable and customizable behavior in new or upgraded
                        application. Simple configuration and usage with annotations, completely xml
                        free.</para>
                </listitem>
                <listitem>
                    <para>Full internal CDI support for bean bundles: injection, producers,
                        interceptors, decorators ...</para>
                </listitem>
                <listitem>
                    <para>Lot of ease features for OSGi usages: injectable services, event
                        notifications, inter-bundle communication ...</para>
                </listitem>
                <listitem>
                    <para>OSGi and CDI compliance all along the way ensuring compatibility with all
                        CDI compliant container and easy application realisation or portage.</para>
                </listitem>
            </itemizedlist></para>
    </section>
    <section>
        <title>Integration bundle discovery and CDI-OSGi start</title>
        <figure>
            <title>CDI-OSGi framework start and stop protocol</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/CDI-OSGistartprotocol.png" format="PNG"
                        align="center" width="800" depth="600"/>
                </imageobject>
                <caption>This figure shows the steps of the CDI-OSGi starting and stopping protocol.
                    Between step 8 and step 11 the framework is in stable state and manages bean
                    bundles.</caption>
            </mediaobject>
        </figure>
    </section>
    <section>
        <title>The life of a bean bundle</title>
        <para>This section presents the lifecycle of a bean bundle and how it impacts CDI and OSGi
            regular behaviors. Mostly bean bundles follow the same lifecycle than a regular bundle.
            There are only two new possible states and they do not modify the behavior from OSGi
            side.</para>
        <figure>
            <title>The bean bundle lifecycle</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/Beanbundlestate.png" align="center" format="PNG"
                        depth="800"/>
                </imageobject>
                <caption>This figure shows the two new states a bean bundle can be in. These states
                    are triggered by two new events and address the CDI container dependency
                    resolution (i.e. services annotated @Required).</caption>
            </mediaobject>
        </figure>
        <para>The regular OSGi lifecycle is not modified by the new CDI-OSGi states as they have the
            same meaning than the ACTIVE state from an OSGi point of view. They only add information
            about the validation of required service availability.</para>
    </section>
    <section>
        <title>How to make a bundle or a bean archive a bean bundle</title>
        <para>There are very few things to do in order to obtain a bean bundle from a bean archive
            or a bundle. Mostly it is just adding the missing marker files and headers in the
            archive: <itemizedlist>
                <listitem>
                    <para> Make a bean archive a bean bundle by adding special OSGi marker headers
                        in its <code>META-INF/Manifest.MF</code> file.</para>
                </listitem>
                <listitem>
                    <para> Or, in the other way, make a bundle a bean bundle by adding a
                            <code>META-INF/bean.xml</code> file.</para>
                </listitem>
            </itemizedlist></para>
        <para>Thus a bean bundle has both <code>META-INF/bean.xml</code> file and OSGi marker
            headers in its <code>META-INF/Manifest.MF</code> file.</para>
        <para>However there is a few other information that CDI-OSGi might need in order to perform
            a correct extension. In particular a bean bundle can not be manage by the extension
            bundle but by his own embedded CDI container. For that there is a new manifest
            header.</para>
        <section>
            <title>The <code>META-INF/bean.xml</code> file </title>
            <para>The beans.xml file follows no particular rules and should be the same as in a
                native CDI environment. Thus it can be completely empty or declare interceptors,
                decorators or alternatives as a regular CDI beans.xml file.</para>
            <para>There will be no different behavior with a classic bean archive except for CDI
                OSGi extension new utilities. But these don't need any modification on the
                    <code>META-INF/bean.xml</code> file.</para>
        </section>
        <section>
            <title>The Embedded-CDIContainer <code>META-INF/Manifest.MF</code> header </title>
            <para>This header prevents the extension bundle to automatically manage the bean bundle
                that set this manifest header to true. So the bean bundle can be manage more finely
                by the user or use a different CDI container. If this header is set to false or is
                not present in the <code>META-INF/Manifest.MF</code> file then the bean bundle will
                be automatically manage by the extension bundle (if it is started).</para>
        </section>
    </section>
</chapter>
