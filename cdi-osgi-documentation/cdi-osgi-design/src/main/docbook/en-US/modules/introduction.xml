<chapter>
    <title id="preface">Preface</title>
    <section>
        <title>About naming and references</title>
        <section>
            <title>Bean archive</title>
            <para>A bean archive is a java archive, such as a jar or a Java EE module, that contains
                a special marker file:<code>META-INF/bean.xml</code>.</para>
            <para>A bean archive may be deployed in a CDI environment. It enables all CDI features
                in that bean archive.</para>
        </section>
        <section>
            <title>OSGi bundle</title>
            <para>A bundle is a Java archive, such as a jar or a folder, that contains some special
                OSGi marker headers in its <code> META-INF/Manifest.MF</code>.</para>
            <para>A bundle may be deployed in an OSGi environment. It enables all OSGi features for
                that bundle.</para>
        </section>
        <section>
            <title>Bean bundle</title>
            <para>A bean bundle is a java archive that contains both special marker file
                    <code>META-INF/bean.xml</code> and special OSGi marker headers in
                    its<code>META-INF/Manifest.MF</code>.</para>
            <para>A bean bundle may be deployed in an OSGi environment with CDI-OSGi and then be
                managed by the CDI-OSGi. It enables both OSGi and CDI features for that
                bundle.</para>
        </section>
        <section>
            <title>References</title>
            <para>This document uses both CDI and OSGi specification documentations as technical
                references. You may refer to these documents for a better understanding of CDI and
                OSGi functionality, references and naming conventions.</para>
        </section>
    </section>
    <section>
        <title>What are CDI-OSGi and Weld-OSGi ?</title>
        <section>
            <title>CDI-OSGi</title>
            <para>CDI-OSGi aims at simplifying application development in an OSGi environment by
                providing a more modern, more user-friendly and faster way to interact with the OSGi
                Framework.</para>
            <para>It addresses the OSGi complexity about services management using CDI specification
                (JSR-299). Thus it provides a CDI OSGi extension with injection utilities for the
                OSGi environment. An integration of any CDI implementation, such as Weld, it is
                used. This integration is possible through a well-defined bootstrapping API.</para>
            <para>CDI-OSGi is a framework that may be used in an OSGi environment and composed by
                five bundles.</para>
        </section>
        <section>
            <title>Weld-OSGi</title>
            <para>Weld-OSGi is an integration of Weld in the OSGi environment using CDI-OSGi. It is
                the exhibit implementation of features exposes by CDI-OSGi APIs.</para>
            <para>Weld-OSGi is one of the five bundles composing CDI-OSGi. But it also names the
                framework CDI-OSGi using this particular CDI integration.</para>
        </section>
        <section>
            <title>Organization and interactions between CDI-OSGi bundles</title>
            <figure>
                <title>The five bundles of CDI-OSGi</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/CDI-OSGibundlesorganization.png" align="center" format="PNG" width="800" depth="600"/>
                    </imageobject>
                    <caption>This figure shows the five bundles of CDI-OSGi and the links between
                        them. Each is described below.</caption>
                </mediaobject>
            </figure>
            <section>
                <title>CDI-OSGi extension</title>
                <para>The blue part represents the CDI OSGi extension. It is composed of one API
                    bundle and its implementation. It is the core of CDI-OSGi that manages all bean
                    bundles.</para>
                <para>Thus the extension API bundle exposes the CDI-OSGi features and the extension
                    bundle enables these features. All interactions with client bundles go through
                    the CDI-OSGi extension part.</para>
            </section>
            <section>
                <title>CDI-OSGi integration</title>
                <para>The yellow part represents the CDI OSGi integration. It is composed of one API
                    bundle and its implementation. It is how CDI features are provided to
                    CDI-OSGi.</para>
                <para>Thus the integration API bundle exposes the requirements of CDI-OSGi in order
                    to run CDI features in OSGi environment and the integration bundle is the
                    implementation of these requirements using a vendor specific CDI implementation
                    (such as Weld).</para>
                <para>Weld-OSGi is one of the possible extension bundle. So the extension bundle is
                    commutable to support various CDI implementation.</para>
            </section>
            <section>
                <title>CDI API bundle</title>
                <para>The fith bundle is the CDI API. It exposes regular CDI features for all client
                    bundles and exempts the user to load CDI API by himself. It is a third-party API
                    provided for convenience to the user.</para>
            </section>
            <section>
                <title>Interaction between bundles</title>
                <para>User client bean bundles should only know about the extension API bundle of
                    CDI-OSGi and the CDI API bundle because they may import their packages in order
                    to use CDI-OSGi features. They do not need to know the other three
                    bundles.</para>
                <para>The extension bundle manages bean bundles transparently. It also implements
                    the extension API and uses the container factory service from the integration
                    bundle.</para>
                <para>Integration API bundle should only be known by users who want to provide an
                    alternative integration bundle. This latter provides the CDI compliant containers
                    used by the extension bundle. The CDI-OSGi integration part is only used
                    internally.</para>
            </section>
        </section>
    </section>
    <section>
        <title>What about other frameworks</title>
        <para>CDI-OSGi stays compliant with CDI specification and uses only standard OSGi
            mechanisms. Every things it does (or nothing from it) CDI and OGSi can do.</para>
        <para>Thereby it is compatible with most of the current frameworks dealing with OSGi service
            management.</para>
        <para>Weld-OSGi has the same compatibility since it is an implementation of CDI-OSGi. But as
            it provides some additional features it may be impossible to use all its possibilities
            coupling with other frameworks.</para>
    </section>
    <section>
        <title>Organization of this document</title>
        <para>Since this specification covers two different (but linked) pieces of software it is
            separated into two majors parts : <itemizedlist>
                <listitem>
                    <para> The CDI-OSGi specifications for core functionality usages and CDI
                        container integration. </para>
                </listitem>
                <listitem>
                    <para> The Weld-OSGi specifications for Weld integration into CDI-OSGi. </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
</chapter>
