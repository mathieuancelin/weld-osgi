<chapter>
    <title id="preface">Preface</title>
    <section>
        <title>About naming and references</title>
        <section>
            <title>Bean archive</title>
            <para>A bean archive is a java archive, such as a jar or a Java EE module, that contains
                a special marker file:<code>META-INF/bean.xml</code>.</para>
            <para>A bean archive may be deployed in a CDI environment. It enables all CDI features
                in that bean archive.</para>
        </section>
        <section>
            <title>OSGi bundle</title>
            <para>A bundle is a Java archive, such as a jar or a folder, that contains some special
                OSGi marker headers in its <code> META-INF/Manifest.MF</code>.</para>
            <para>A bundle may be deployed in an OSGi environment. It enables all OSGi features for
                that bundle.</para>
        </section>
        <section>
            <title>Service, implementation, instance and registration</title>
            <para>A service is mostly an interface. This interface defines the contract that
                describes what the service may do. It might be several way to actually providing the
                service, thus a service might have multiple implementations.</para>
            <para>A service implementation is a class that implements this service. It is what is
                available to other components that use the service. To use the service the component
                obtain an instance of the implementation.</para>
            <para>A service instance is an instance of one of the service implementations. It is
                what the user manipulates to perform the service.</para>
            <para>A registration is the object that represents a service registered with a
                particular implementation. Then this implementation can be searched and its
                instances can be obtained. Every time a service implementation his register a
                corresponding registration object is created.</para>
        </section>
        <section>
            <title>References</title>
            <para>This document uses both CDI and OSGi specification documentations as technical
                references. You may refer to these documents for a better understanding of CDI and
                OSGi functionality, references and naming conventions.</para>
            <para>CDI-OSGi comes with other documentations and you may refer to CDI-OSGi JavaDoc and
                CDI-OSGi user manual for a better understanding of CDI-OSGi.</para>
        </section>
    </section>
    <section>
        <title>What are CDI-OSGi and Weld-OSGi ?</title>
        <section>
            <title>CDI-OSGi</title>
            <para>CDI-OSGi aims at simplifying application development in an OSGi environment by
                providing a more modern, more user-friendly and faster way to interact with the OSGi
                Framework.</para>
            <para>It addresses the OSGi complexity about services management using CDI specification
                (JSR-299). Thus it provides a CDI OSGi extension with injection utilities for the
                OSGi environment. An integration of any CDI implementation, such as Weld, it is
                used. This integration is possible through a well-defined bootstrapping API.</para>
            <para>CDI-OSGi is a framework that may be used in an OSGi environment and composed by
                five bundles.</para>
        </section>
        <section>
            <title>Weld-OSGi</title>
            <para>Weld-OSGi is an integration of Weld in the OSGi environment using CDI-OSGi. It is
                the exhibit implementation of features exposes by CDI-OSGi APIs.</para>
            <para>Weld-OSGi is one of the five bundles composing CDI-OSGi. But it also names the
                framework CDI-OSGi using this particular CDI integration.</para>
        </section>
    </section>
    <section>
        <title>Third party dependencies and environment</title>
        <para>CDI-OSGi may run into an OSGi environment, therefore it requires an OSGi
            implementation framework to run in (such as Apache Felix, Equinox, Knopflerfish
            ...).</para>
        <para>CDI-OSGi also depends on a CDI implementation (such as Weld, Open Web Beans, CanDI
            ..).</para>
        <para>CDI-OSGi logs its operations using the SLF4J logging facade and the LogBack logging
            implementation.</para>
    </section>
    <section>
        <title>What about other frameworks</title>
        <para>CDI-OSGi stays compliant with CDI specification and uses only standard OSGi
            mechanisms. Every things it does (or nothing from it) CDI and OGSi can do.</para>
        <para>Thereby it is compatible with most of the current frameworks dealing with OSGi service
            management.</para>
        <para>Weld-OSGi has the same compatibility since it is an implementation of CDI-OSGi. But as
            it provides some additional features it may be impossible to use all its possibilities
            coupling with other frameworks.</para>
    </section>
    <section>
        <title>Organization of this document</title>
        <para>Since this specification covers two different (but linked) pieces of software it is
            separated into two majors parts : <itemizedlist>
                <listitem>
                    <para> The CDI-OSGi specifications for core functionality usages and CDI
                        container integration. </para>
                </listitem>
                <listitem>
                    <para> The Weld-OSGi specifications for Weld integration into CDI-OSGi. </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
</chapter>
